#!/bin/bash
#
# This script acts as a wrapper for MTR, using it in report mode forever.
#
# Useful for doing things like watching my Comcast connection at home. :-)
#

#
# Errors are fatal
#
set -e

function print_syntax() {
	echo "Syntax: $0 [--loop] [-6] [--log] --num num hostname"
	exit 1
}

#
# Wrapper to run mtr, with possible logging
#
# {param} string $1 Our command to run
# {param} string $2 The file to log to, if specified
#
function run_mtr() {
	local CMD=$1
	local LOG=$2

	if test $LOG
	then
		echo "" | tee -a ${LOG}
		date | tee -a ${LOG}
		echo "Running '${CMD}'..." | tee -a ${LOG}
		echo "Logging output to '${LOG}'..."
		$CMD | tee -a ${LOG}

	else
		echo ""
		date
		echo "Running '${CMD}'..."
		$CMD

	fi

} # End of run_mtr()


LOOP=""
IPV6=""
NUM=""
HOST=""
LOG=""


#
# Loop through our arguments and parse them
#
while true
do

	ARG=$1
	ARG_NEXT=$2

	if test ! "$ARG"
	then
		break

	elif test $ARG == "--loop"
	then
		LOOP=1

	elif test $ARG == "-6"
	then
		IPV6=1

	elif test $ARG == "--num"
	then
		NUM=$ARG_NEXT
		shift

	elif test $ARG == "--log"
	then
		LOG="mtr-report-log.txt"

	elif test $ARG == "-h"
	then
		print_syntax

	else
		HOST=$ARG

	fi

	shift

done

if test ! $HOST
then
	print_syntax

elif test ! $NUM
then
	print_syntax

fi

#echo "LOOP=${LOOP}, IPV6=${IPV6}, NUM=${NUM}, LOG=${LOG}, HOST=${HOST}" # Debugging

#
# Create our command
#
CMD="mtr "
if test $IPV6
then
	CMD="${CMD} -6 "
else
	CMD="${CMD} -4 "
fi

CMD="${CMD} --report --report-cycles ${NUM} ${HOST}"

#echo "CMD: $CMD" # Debugging

if test ! $LOOP
then
	run_mtr "$CMD" $LOG

else 
	while true
	do
		run_mtr "$CMD" $LOG
	done

fi


